// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator semantic {
  provider = "node ../../packages/prisma-semantic-generator/dist/generator.js"
  output   = "../generated/semantic"
}

// User model with various semantic patterns
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password_hash     String
  first_name        String
  last_name         String
  phone_number      String?
  
  // Premium/subscription semantics
  subscription_tier String    @default("free")
  is_premium        Boolean   @default(false)
  premium_until     DateTime?
  
  // Financial semantics
  account_balance   Decimal   @default(0)
  monthly_revenue   Decimal?
  total_spent       Decimal   @default(0)
  credit_limit      Decimal?
  
  // Temporal semantics
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  last_login_at     DateTime?
  email_verified_at DateTime?
  
  // Cancellation/danger semantics
  is_cancelled      Boolean   @default(false)
  cancelled_at      DateTime?
  is_deleted        Boolean   @default(false)
  deleted_at        DateTime?
  is_suspended      Boolean   @default(false)
  suspension_reason String?
  
  // Relations
  orders            Order[]
  payments          Payment[]
  profile           Profile?
}

// Profile with additional semantic patterns
model Profile {
  id              String    @id @default(cuid())
  user_id         String    @unique
  user            User      @relation(fields: [user_id], references: [id])
  
  // Personal information
  bio             String?
  avatar_url      String?
  website_url     String?
  linkedin_url    String?
  twitter_handle  String?
  
  // Location
  country         String?
  city            String?
  postal_code     String?
  
  // Percentage semantics
  profile_completion_percentage Float @default(0)
  engagement_rate              Float?
  
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

// Order model with e-commerce semantics
model Order {
  id              String    @id @default(cuid())
  order_number    String    @unique
  user_id         String
  user            User      @relation(fields: [user_id], references: [id])
  
  // Financial
  subtotal        Decimal
  tax_amount      Decimal
  shipping_cost   Decimal
  total_amount    Decimal
  discount_amount Decimal   @default(0)
  
  // Status semantics
  order_status    String    @default("pending")
  payment_status  String    @default("unpaid")
  shipping_status String    @default("unfulfilled")
  
  // Temporal
  ordered_at      DateTime  @default(now())
  shipped_at      DateTime?
  delivered_at    DateTime?
  cancelled_at    DateTime?
  
  // Cancellation
  is_cancelled    Boolean   @default(false)
  is_refunded     Boolean   @default(false)
  refund_amount   Decimal?
  
  items           OrderItem[]
  payment         Payment?
}

// OrderItem with product semantics
model OrderItem {
  id              String    @id @default(cuid())
  order_id        String
  order           Order     @relation(fields: [order_id], references: [id])
  
  product_sku     String
  product_name    String
  
  // Financial
  unit_price      Decimal
  quantity        Int
  total_price     Decimal
  discount_percentage Float @default(0)
  
  created_at      DateTime  @default(now())
}

// Payment model with financial semantics
model Payment {
  id              String    @id @default(cuid())
  payment_id      String    @unique
  order_id        String    @unique
  order           Order     @relation(fields: [order_id], references: [id])
  user_id         String
  user            User      @relation(fields: [user_id], references: [id])
  
  // Financial
  amount          Decimal
  currency        String    @default("USD")
  fee_amount      Decimal   @default(0)
  net_amount      Decimal
  
  // Payment method
  payment_method  String
  card_last_four  String?
  
  // Status
  payment_status  String    @default("pending")
  is_successful   Boolean   @default(false)
  is_failed       Boolean   @default(false)
  failure_reason  String?
  
  // Temporal
  processed_at    DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}